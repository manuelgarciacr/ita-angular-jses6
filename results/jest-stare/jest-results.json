{
  "numFailedTestSuites": 1,
  "numFailedTests": 7,
  "numPassedTestSuites": 0,
  "numPassedTests": 34,
  "numPendingTestSuites": 0,
  "numPendingTests": 0,
  "numRuntimeErrorTestSuites": 0,
  "numTodoTests": 0,
  "numTotalTestSuites": 1,
  "numTotalTests": 41,
  "openHandles": [],
  "snapshot": {
    "added": 0,
    "didUpdate": false,
    "failure": false,
    "filesAdded": 0,
    "filesRemoved": 0,
    "filesRemovedList": [],
    "filesUnmatched": 0,
    "filesUpdated": 0,
    "matched": 0,
    "total": 0,
    "unchecked": 0,
    "uncheckedKeysByFile": [],
    "unmatched": 0,
    "updated": 0
  },
  "startTime": 1689025080945,
  "success": false,
  "testResults": [
    {
      "leaks": false,
      "numFailingTests": 7,
      "numPassingTests": 34,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1689025082288,
        "runtime": 1271,
        "slow": false,
        "start": 1689025081017
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/tests/films.spec.js",
      "testResults": [
        {
          "ancestorTitles": [
            "Function \"getAllDirectors\""
          ],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"getAllDirectors\" should be declared",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should be declared"
        },
        {
          "ancestorTitles": [
            "Function \"getAllDirectors\""
          ],
          "duration": 48,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"getAllDirectors\" should return an array",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should return an array"
        },
        {
          "ancestorTitles": [
            "Function \"getAllDirectors\""
          ],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"getAllDirectors\" should return a new array, not update the original one",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should return a new array, not update the original one"
        },
        {
          "ancestorTitles": [
            "Function \"getAllDirectors\""
          ],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"getAllDirectors\" should return a new array with the same length as the original one",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should return a new array with the same length as the original one"
        },
        {
          "ancestorTitles": [
            "Function \"getMoviesFromDirector\""
          ],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"getMoviesFromDirector\" should be declared",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should be declared"
        },
        {
          "ancestorTitles": [
            "Function \"getMoviesFromDirector\""
          ],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"getMoviesFromDirector\" should return an array",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should return an array"
        },
        {
          "ancestorTitles": [
            "Function \"getMoviesFromDirector\""
          ],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"getMoviesFromDirector\" should return a new array, not update the original one",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should return a new array, not update the original one"
        },
        {
          "ancestorTitles": [
            "Function \"getMoviesFromDirector\""
          ],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"getMoviesFromDirector\" should return a new array with the movies from director",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should return a new array with the movies from director"
        },
        {
          "ancestorTitles": [
            "Function \"moviesAverageOfDirector\""
          ],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"moviesAverageOfDirector\" should be declared",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should be declared"
        },
        {
          "ancestorTitles": [
            "Function \"moviesAverageOfDirector\""
          ],
          "duration": 49,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"moviesAverageOfDirector\" should return a number",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should return a number"
        },
        {
          "ancestorTitles": [
            "Function \"moviesAverageOfDirector\""
          ],
          "duration": 16,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"moviesAverageOfDirector\"  should return the average score of movies selecting only the director films. With 2 decimals! ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": " should return the average score of movies selecting only the director films. With 2 decimals! "
        },
        {
          "ancestorTitles": [
            "Function \"orderAlphabetically\""
          ],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"orderAlphabetically\" should be declared",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should be declared"
        },
        {
          "ancestorTitles": [
            "Function \"orderAlphabetically\""
          ],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"orderAlphabetically\" should return an array",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should return an array"
        },
        {
          "ancestorTitles": [
            "Function \"orderAlphabetically\""
          ],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"orderAlphabetically\" should not mutate the original array",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should not mutate the original array"
        },
        {
          "ancestorTitles": [
            "Function \"orderAlphabetically\""
          ],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"orderAlphabetically\" should only return the title of the movies, each value should be a string",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should only return the title of the movies, each value should be a string"
        },
        {
          "ancestorTitles": [
            "Function \"orderAlphabetically\""
          ],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"orderAlphabetically\" should return all of items when the array passed has fewer than 20 items",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should return all of items when the array passed has fewer than 20 items"
        },
        {
          "ancestorTitles": [
            "Function \"orderAlphabetically\""
          ],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"orderAlphabetically\" should order them alphabetically.",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should order them alphabetically."
        },
        {
          "ancestorTitles": [
            "Function \"orderAlphabetically\""
          ],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"orderAlphabetically\" should return the top 20 after ordering them alphabetically.",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should return the top 20 after ordering them alphabetically."
        },
        {
          "ancestorTitles": [
            "Function \"orderByYear\""
          ],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"orderByYear\" should be declared",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should be declared"
        },
        {
          "ancestorTitles": [
            "Function \"orderByYear\""
          ],
          "duration": 11,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"orderByYear\" should return an array",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should return an array"
        },
        {
          "ancestorTitles": [
            "Function \"orderByYear\""
          ],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"orderByYear\" should return a new array",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should return a new array"
        },
        {
          "ancestorTitles": [
            "Function \"orderByYear\""
          ],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"orderByYear\" should return the element in a single element array",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should return the element in a single element array"
        },
        {
          "ancestorTitles": [
            "Function \"orderByYear\""
          ],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"orderByYear\" should return the new array in ascending order",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should return the new array in ascending order"
        },
        {
          "ancestorTitles": [
            "Function \"orderByYear\""
          ],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"orderByYear\" should order movies with the same year by their title, alphabetically",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should order movies with the same year by their title, alphabetically"
        },
        {
          "ancestorTitles": [
            "Function \"moviesAverageByCategory\""
          ],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"moviesAverageByCategory\" should be declared",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should be declared"
        },
        {
          "ancestorTitles": [
            "Function \"moviesAverageByCategory\""
          ],
          "duration": 371,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"moviesAverageByCategory\" should return a number",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should return a number"
        },
        {
          "ancestorTitles": [
            "Function \"moviesAverageByCategory\""
          ],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"moviesAverageByCategory\"  should return the average score of 2 movies with score 7 each",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": " should return the average score of 2 movies with score 7 each"
        },
        {
          "ancestorTitles": [
            "Function \"moviesAverageByCategory\""
          ],
          "duration": 12,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"moviesAverageByCategory\" should be rounded to 2 decimals places",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should be rounded to 2 decimals places"
        },
        {
          "ancestorTitles": [
            "Function \"moviesAverageByCategory\""
          ],
          "duration": 11,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"moviesAverageByCategory\" should not take into consideration films of other category",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should not take into consideration films of other category"
        },
        {
          "ancestorTitles": [
            "Function \"moviesAverageByCategory\""
          ],
          "duration": 9,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"moviesAverageByCategory\" should return average even if one of the movies does not have score",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should return average even if one of the movies does not have score"
        },
        {
          "ancestorTitles": [
            "Function \"hoursToMinutes\""
          ],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"hoursToMinutes\" should be declared",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should be declared"
        },
        {
          "ancestorTitles": [
            "Function \"hoursToMinutes\""
          ],
          "duration": 3,
          "failureDetails": [
            {
              "matcherResult": {
                "actual": false,
                "expected": true,
                "message": "\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mtrue\u001b[39m\nReceived: \u001b[31mfalse\u001b[39m",
                "name": "toBe",
                "pass": false
              }
            }
          ],
          "failureMessages": [
            "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mtrue\u001b[39m\nReceived: \u001b[31mfalse\u001b[39m\n    at Object.<anonymous> (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/tests/films.spec.js:364:53)\n    at Promise.then.completed (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/utils.js:391:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/utils.js:316:10)\n    at _callCircusTest (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:218:40)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)\n    at _runTest (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:155:3)\n    at _runTestsForDescribeBlock (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:66:9)\n    at _runTestsForDescribeBlock (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:60:9)\n    at run (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:25:3)"
          ],
          "fullName": "Function \"hoursToMinutes\" should return an array",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "failed",
          "title": "should return an array"
        },
        {
          "ancestorTitles": [
            "Function \"hoursToMinutes\""
          ],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"hoursToMinutes\" should return a new array, not update the original one",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should return a new array, not update the original one"
        },
        {
          "ancestorTitles": [
            "Function \"hoursToMinutes\""
          ],
          "duration": 0,
          "failureDetails": [
            {}
          ],
          "failureMessages": [
            "TypeError: Cannot read property '0' of undefined\n    at Object.<anonymous> (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/tests/films.spec.js:372:41)\n    at Promise.then.completed (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/utils.js:391:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/utils.js:316:10)\n    at _callCircusTest (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:218:40)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)\n    at _runTest (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:155:3)\n    at _runTestsForDescribeBlock (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:66:9)\n    at _runTestsForDescribeBlock (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:60:9)\n    at run (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:25:3)"
          ],
          "fullName": "Function \"hoursToMinutes\" should return an array of movies with duration as a number",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "failed",
          "title": "should return an array of movies with duration as a number"
        },
        {
          "ancestorTitles": [
            "Function \"hoursToMinutes\""
          ],
          "duration": 1,
          "failureDetails": [
            {}
          ],
          "failureMessages": [
            "TypeError: Cannot read property '0' of undefined\n    at Object.<anonymous> (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/tests/films.spec.js:377:36)\n    at Promise.then.completed (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/utils.js:391:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/utils.js:316:10)\n    at _callCircusTest (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:218:40)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)\n    at _runTest (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:155:3)\n    at _runTestsForDescribeBlock (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:66:9)\n    at _runTestsForDescribeBlock (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:60:9)\n    at run (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:25:3)"
          ],
          "fullName": "Function \"hoursToMinutes\" should return an array of movies with the correct duration for a 31 minute movie",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "failed",
          "title": "should return an array of movies with the correct duration for a 31 minute movie"
        },
        {
          "ancestorTitles": [
            "Function \"hoursToMinutes\""
          ],
          "duration": 0,
          "failureDetails": [
            {}
          ],
          "failureMessages": [
            "TypeError: Cannot read property '0' of undefined\n    at Object.<anonymous> (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/tests/films.spec.js:382:36)\n    at Promise.then.completed (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/utils.js:391:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/utils.js:316:10)\n    at _callCircusTest (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:218:40)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)\n    at _runTest (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:155:3)\n    at _runTestsForDescribeBlock (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:66:9)\n    at _runTestsForDescribeBlock (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:60:9)\n    at run (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:25:3)"
          ],
          "fullName": "Function \"hoursToMinutes\" should return an array of movies with the correct duration for a 341 minute movie",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "failed",
          "title": "should return an array of movies with the correct duration for a 341 minute movie"
        },
        {
          "ancestorTitles": [
            "Function \"hoursToMinutes\""
          ],
          "duration": 0,
          "failureDetails": [
            {}
          ],
          "failureMessages": [
            "TypeError: Cannot read property '0' of undefined\n    at Object.<anonymous> (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/tests/films.spec.js:387:36)\n    at Promise.then.completed (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/utils.js:391:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/utils.js:316:10)\n    at _callCircusTest (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:218:40)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)\n    at _runTest (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:155:3)\n    at _runTestsForDescribeBlock (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:66:9)\n    at _runTestsForDescribeBlock (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:60:9)\n    at run (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:25:3)"
          ],
          "fullName": "Function \"hoursToMinutes\" should return an array of movies with the correct duration for a 2 hour movie",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "failed",
          "title": "should return an array of movies with the correct duration for a 2 hour movie"
        },
        {
          "ancestorTitles": [
            "Function \"bestFilmOfYear\""
          ],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"bestFilmOfYear\" should be declared",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should be declared"
        },
        {
          "ancestorTitles": [
            "Function \"bestFilmOfYear\""
          ],
          "duration": 1,
          "failureDetails": [
            {
              "matcherResult": {
                "actual": false,
                "expected": true,
                "message": "\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mtrue\u001b[39m\nReceived: \u001b[31mfalse\u001b[39m",
                "name": "toBe",
                "pass": false
              }
            }
          ],
          "failureMessages": [
            "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mtrue\u001b[39m\nReceived: \u001b[31mfalse\u001b[39m\n    at Object.<anonymous> (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/tests/films.spec.js:398:59)\n    at Promise.then.completed (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/utils.js:391:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/utils.js:316:10)\n    at _callCircusTest (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:218:40)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)\n    at _runTest (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:155:3)\n    at _runTestsForDescribeBlock (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:66:9)\n    at _runTestsForDescribeBlock (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:60:9)\n    at run (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:25:3)"
          ],
          "fullName": "Function \"bestFilmOfYear\" should return an array",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "failed",
          "title": "should return an array"
        },
        {
          "ancestorTitles": [
            "Function \"bestFilmOfYear\""
          ],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Function \"bestFilmOfYear\" should return a new array, not update the original one",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "passed",
          "title": "should return a new array, not update the original one"
        },
        {
          "ancestorTitles": [
            "Function \"bestFilmOfYear\""
          ],
          "duration": 2,
          "failureDetails": [
            {
              "matcherResult": {
                "expected": [
                  {
                    "title": "Film1",
                    "year": 1957,
                    "director": "Stanley Kubrick",
                    "duration": "1h 28min",
                    "genre": [
                      "Drama",
                      "War"
                    ],
                    "score": 10
                  }
                ],
                "message": "\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m[{\"director\": \"Stanley Kubrick\", \"duration\": \"1h 28min\", \"genre\": [\"Drama\", \"War\"], \"score\": 10, \"title\": \"Film1\", \"year\": 1957}]\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m",
                "name": "toEqual",
                "pass": false
              }
            }
          ],
          "failureMessages": [
            "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m[{\"director\": \"Stanley Kubrick\", \"duration\": \"1h 28min\", \"genre\": [\"Drama\", \"War\"], \"score\": 10, \"title\": \"Film1\", \"year\": 1957}]\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.<anonymous> (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/tests/films.spec.js:432:43)\n    at Promise.then.completed (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/utils.js:391:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/utils.js:316:10)\n    at _callCircusTest (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:218:40)\n    at processTicksAndRejections (internal/process/task_queues.js:97:5)\n    at _runTest (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:155:3)\n    at _runTestsForDescribeBlock (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:66:9)\n    at _runTestsForDescribeBlock (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:60:9)\n    at run (/home/manuel/Documentos/vscode/_Js/ita-angular-jses6/node_modules/jest-circus/build/run.js:25:3)"
          ],
          "fullName": "Function \"bestFilmOfYear\" should return the best film of a year, searching in an array",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "status": "failed",
          "title": "should return the best film of a year, searching in an array"
        }
      ],
      "failureMessage": "\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mFunction \"hoursToMinutes\" › should return an array\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32mtrue\u001b[39m\n    Received: \u001b[31mfalse\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 362 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 363 |\u001b[39m   it(\u001b[32m'should return an array'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 364 |\u001b[39m     expect(hoursToMinutes(movies) \u001b[36minstanceof\u001b[39m \u001b[33mArray\u001b[39m)\u001b[33m.\u001b[39mtoBe(\u001b[36mtrue\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 365 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 366 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 367 |\u001b[39m   it(\u001b[32m'should return a new array, not update the original one'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/films.spec.js\u001b[39m\u001b[0m\u001b[2m:364:53)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mFunction \"hoursToMinutes\" › should return an array of movies with duration as a number\u001b[39m\u001b[22m\n\n    TypeError: Cannot read property '0' of undefined\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 370 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 371 |\u001b[39m   it(\u001b[32m'should return an array of movies with duration as a number'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 372 |\u001b[39m     expect(\u001b[36mtypeof\u001b[39m hoursToMinutes(movies)[\u001b[35m0\u001b[39m]\u001b[33m.\u001b[39mduration)\u001b[33m.\u001b[39mtoBe(\u001b[32m'number'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                                         \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 373 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 374 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 375 |\u001b[39m   it(\u001b[32m'should return an array of movies with the correct duration for a 31 minute movie'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/films.spec.js\u001b[39m\u001b[0m\u001b[2m:372:41)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mFunction \"hoursToMinutes\" › should return an array of movies with the correct duration for a 31 minute movie\u001b[39m\u001b[22m\n\n    TypeError: Cannot read property '0' of undefined\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 375 |\u001b[39m   it(\u001b[32m'should return an array of movies with the correct duration for a 31 minute movie'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 376 |\u001b[39m     \u001b[36mconst\u001b[39m movieTry \u001b[33m=\u001b[39m [{ duration\u001b[33m:\u001b[39m \u001b[32m'0h 31min'\u001b[39m }]\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 377 |\u001b[39m     expect(hoursToMinutes(movieTry)[\u001b[35m0\u001b[39m]\u001b[33m.\u001b[39mduration)\u001b[33m.\u001b[39mtoBe(\u001b[35m31\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                                    \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 378 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 379 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 380 |\u001b[39m   it(\u001b[32m'should return an array of movies with the correct duration for a 341 minute movie'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/films.spec.js\u001b[39m\u001b[0m\u001b[2m:377:36)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mFunction \"hoursToMinutes\" › should return an array of movies with the correct duration for a 341 minute movie\u001b[39m\u001b[22m\n\n    TypeError: Cannot read property '0' of undefined\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 380 |\u001b[39m   it(\u001b[32m'should return an array of movies with the correct duration for a 341 minute movie'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 381 |\u001b[39m     \u001b[36mconst\u001b[39m movieTry \u001b[33m=\u001b[39m [{ duration\u001b[33m:\u001b[39m \u001b[32m'5h 41min'\u001b[39m }]\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 382 |\u001b[39m     expect(hoursToMinutes(movieTry)[\u001b[35m0\u001b[39m]\u001b[33m.\u001b[39mduration)\u001b[33m.\u001b[39mtoBe(\u001b[35m341\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                                    \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 383 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 384 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 385 |\u001b[39m   it(\u001b[32m'should return an array of movies with the correct duration for a 2 hour movie'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/films.spec.js\u001b[39m\u001b[0m\u001b[2m:382:36)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mFunction \"hoursToMinutes\" › should return an array of movies with the correct duration for a 2 hour movie\u001b[39m\u001b[22m\n\n    TypeError: Cannot read property '0' of undefined\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 385 |\u001b[39m   it(\u001b[32m'should return an array of movies with the correct duration for a 2 hour movie'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 386 |\u001b[39m     \u001b[36mconst\u001b[39m movieTry \u001b[33m=\u001b[39m [{ duration\u001b[33m:\u001b[39m \u001b[32m'2h'\u001b[39m }]\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 387 |\u001b[39m     expect(hoursToMinutes(movieTry)[\u001b[35m0\u001b[39m]\u001b[33m.\u001b[39mduration)\u001b[33m.\u001b[39mtoBe(\u001b[35m120\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                                    \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 388 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 389 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 390 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/films.spec.js\u001b[39m\u001b[0m\u001b[2m:387:36)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mFunction \"bestFilmOfYear\" › should return an array\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32mtrue\u001b[39m\n    Received: \u001b[31mfalse\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 396 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 397 |\u001b[39m   it(\u001b[32m'should return an array'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 398 |\u001b[39m     expect(bestFilmOfYear(movies\u001b[33m,\u001b[39m \u001b[35m1999\u001b[39m) \u001b[36minstanceof\u001b[39m \u001b[33mArray\u001b[39m)\u001b[33m.\u001b[39mtoBe(\u001b[36mtrue\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                                                           \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 399 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 400 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 401 |\u001b[39m   it(\u001b[32m'should return a new array, not update the original one'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/films.spec.js\u001b[39m\u001b[0m\u001b[2m:398:59)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mFunction \"bestFilmOfYear\" › should return the best film of a year, searching in an array\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m[{\"director\": \"Stanley Kubrick\", \"duration\": \"1h 28min\", \"genre\": [\"Drama\", \"War\"], \"score\": 10, \"title\": \"Film1\", \"year\": 1957}]\u001b[39m\n    Received: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 430 |\u001b[39m       }\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 431 |\u001b[39m     ]\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 432 |\u001b[39m     expect(bestFilmOfYear(testArr\u001b[33m,\u001b[39m \u001b[35m1957\u001b[39m))\u001b[33m.\u001b[39mtoEqual([\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     |\u001b[39m                                           \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 433 |\u001b[39m       {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 434 |\u001b[39m         title\u001b[33m:\u001b[39m \u001b[32m'Film1'\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 435 |\u001b[39m         year\u001b[33m:\u001b[39m \u001b[35m1957\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/films.spec.js\u001b[39m\u001b[0m\u001b[2m:432:43)\u001b[22m\u001b[2m\u001b[22m\n"
    }
  ],
  "wasInterrupted": false
}